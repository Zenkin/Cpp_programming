#ifndef ARRAY_H
#define ARRAY_H

// В проекте вложенность директорий - .../array/array/array/... . От первой директории точно можно избавиться.

#include<iostream>

//не используемый include
#include"start_work_with_array.h"

// По имени этой константы не понятно, для чего она. Надо подобрать говорящее название.
// Она же относится именно к классу, поэтому лучше поместить ее в сам класс.
const int K = 2;

// Класс лучше называть с большой буквы.
// Есть такое соглашение в java -- самом распространённом ООП языке.
// В с++ бывает по-разному, конечно, но вот по style-guide от гугл, классы лучше именовать с большой буквы
// https://google.github.io/styleguide/cppguide.html#Naming
//
// Это поможет другому программисту быстрее разобраться в твоем коде, когда он будет понимать что Array - это класс.
class array
{
    // Это поле далее не используется. Его лучше убрать.
    int element_number;
    int size;
    // Обычно это поле называют capacity, т.е. вместимость, что в действительности отражает его назначение.
    // А memory -- это другое, это sizeof(int) * capacity.
    int memory;
    int *arr;
public:
    //TODO после исправления замечаний по уже написанному коду, было бы отлично
    // перегрузить копирующий конструктор, оператор присваивания.
    array(int i);
    ~array();
    
    // Лучше чтобы этот метод возвращал удаляемый элемент. Такой кейс иногда используется в массивах.
    void remove(int i);
    // По моему add element -- это глагол с дополнением, а параметр функции это просто существительное
    // лучше просто element.
    // Если имелось ввиду, что это добавляемый элемент, то по названию метода понятно, что в этом контексте элемент -- добавляемый.
    void add(int add_element);
    //TODO после исправлений по существующему коду, было бы отлично
    // добавить метод add(index, element), который добавлял бы элемент "в середину массива" (на позицию index). Среднее время этой операции O(n).
    void print();
};

#endif // ARRAY_H
